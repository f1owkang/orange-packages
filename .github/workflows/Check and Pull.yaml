name: Check and Pull Multiple Repositories Updates

# 配置触发器：每天凌晨0点运行一次，并允许手动触发
on:
  schedule:
    - cron: '0 0 * * *' # 每天凌晨0点运行一次
  workflow_dispatch: # 允许手动触发

jobs:
  check-updates:
    runs-on: ubuntu-latest

    steps:
    # 第一步：签出当前仓库的代码
    - name: Checkout this repository
      uses: actions/checkout@v4

    # 第二步：设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # 第三步：安装 PyYAML 库，用于解析 YAML 文件
    - name: Install PyYAML
      run: python -m pip install pyyaml

    # 第四步：执行 Python 脚本，读取 YAML 文件中的仓库信息并生成 JSON 文件
    - name: Read repositories from YAML
      id: read_yaml
      run: python update.py
    
    # 第五步：检查每个仓库是否有更新，并拉取更新的文件
    - name: Check and Pull Updates
      run: |
        repos=$(cat repos.json | jq -r '.[] | @base64')
        for repo in $repos; do
          _jq() {
            echo ${repo} | base64 --decode | jq -r ${1}
          }

          repo_name=$(_jq '.name')
          repo_url=$(_jq '.url')
          repo_path=$(_jq '.path')

          # 如果仓库路径不存在，则直接克隆远程仓库到本地路径
          if [ ! -d "$repo_path" ]; then
            echo "Cloning $repo_url into $repo_path"
            git clone --depth=1 ${repo_url} $repo_path
          else
            # 如果仓库路径存在，则检查远程仓库是否存在
            echo "Checking if remote repository exists for $repo_url"
            if git ls-remote --exit-code $repo_url; then
              # 如果远程仓库存在，则删除本地路径并重新克隆远程仓库到本地路径
              echo "Remote repository exists for $repo_url, deleting local path and cloning again"
              rm -rf $repo_path
              git clone --depth=1 ${repo_url} $repo_path
            else
              # 如果远程仓库不存在，则跳过此仓库
              echo "Remote repository does not exist for $repo_url, skipping"
            fi
          fi
        done

    # 第六步：删除 repos.json 文件
    - name: Delete repos.json
      run: rm repos.json

    # 第七步：将更新后的文件提交到当前仓库
    - name: Commit and Push Changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config advice.addEmbeddedRepo false
        git add .
        git commit -m "Updated repositories files"
        git push origin HEAD:main
